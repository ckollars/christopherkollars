%pull-left {
  float: left;
}
%pull-right {
  float: right;
}
%display-inline-block{
  display: inline-block;
}
%display-block{
  display: block;
}

// Margins & paddings
%margin-0 {
  margin: 0;
}
%padding-0 {
  padding: 0;
}



/**
 * $COLORS
 */

// Background Colors
%background-green{
  background-color: $green;
}
%background-light-green{
  background-color: $light-green;
}
%background-grey1{
  background-color: $grey1;
}
%background-grey2{
  background-color: $grey2;
}
%background-grey3{
  background-color: $grey3;
}
%background-white{
  background-color: $white;
}
%background-black{
  background-color: $black;
}

// Typography Colors
%color-green{
  color: $green;
}
%color-grey1{
  color: $grey1;
}
%color-grey2{
  color: $grey2;
}

%color-white{
  color: $white;
}
%color-black{
  color: $black;
}



/**
 * $TYPOGRAPHY
 */




/**
 * $HLIST
 */
%hlist {
  list-style: none;
  margin:0;
  padding: 0;
  @include clearfix(true);
  > li {
    list-style: none;
    &,
    > a {
      float: left;
    }
  }
}

@mixin text-invisible {
  text-indent: -999em;
}

%text-invisible {
  @include text-invisible;
}

// Hide elements from all users.//
// Used for elements which should not be immediately displayed to any user. An
// example would be a collapsible fieldset that will be expanded with a click
// from a user. The effect of this class can be toggled with the jQuery show()
// and hide() functions.
@mixin element-hidden {
  display: none;
}

%element-hidden {
  @include element-hidden;
}

// Hide elements visually, but keep them available for screen-readers.
//
// Used for information required for screen-reader users to understand and use
// the site where visual display is undesirable. Information provided in this
// manner should be kept concise, to avoid unnecessary burden on the user.
// "!important" is used to prevent unintentional overrides.
@mixin element-invisible {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
}

%element-invisible {
  @include element-invisible;
}

// Reverts 'element-invisible'.
@mixin element-visible {
  position: relative !important;
  clip: inherit;
  overflow: inherit;
  height: inherit;
}

%element-visible {
  @include element-visible;
}

// The .element-focusable class extends the .element-invisible class to allow
// the element to be focusable when navigated to via the keyboard.
@mixin element-focusable {
  &:active,
  &:focus {
    position: static !important;
    clip: auto;
    overflow: visible;
    height: auto;
  }
}

%element-focusable {
  @include element-focusable;
}


