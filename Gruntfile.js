/*global module:false,require:false,console:false */
module.exports = function(grunt) {

  require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);

  // Project configuration.
  grunt.initConfig({
    // Metadata.
    pkg: grunt.file.readJSON('package.json'),
    siteConfig: grunt.file.readJSON('site-config.json'),
    banner: '/*! <%= pkg.title || pkg.name %> - v<%= pkg.version %> - ' +
      '<%= grunt.template.today("yyyy-mm-dd") %>\n' +
      '<%= pkg.homepage ? "* " + pkg.homepage + "\\n" : "" %>' +
      '* Copyright (c) <%= grunt.template.today("yyyy") %> <%= pkg.author %>;' +
      ' <%= pkg.license %> License */\n',
    urls: {
      // from domain root, do not include the first slash, do include a trailing slash
      root: '<%= siteConfig.rootDir %>',
      jsSrc: '<%= urls.root %>js/',
      cssSrc: '<%= urls.root %>css/',
      scssSrc: '<%= urls.root %>scss/',
      imgSrc: '<%= urls.root %>img/',
      svgSrc: '<%= urls.imgSrc %>svg/',
      distFolder: '<%= urls.root %>dist/<%= pkg.version %>/',
      distFeed: '<%= urls.root %>_site/feed/atom.xml'
    },
    yaml: {
      file: '<%= urls.root %>_config.yml',
      vars: {
        safe: false,
        markdown: 'rdiscount',
        permalink: '<%= urls.root %>/:title/',
        pygments: true,
        exclude: 'node_modules, README.md, build.sh',
        distFolder: '/<%= urls.distFolder %>',
        rssRoot: '<%= siteConfig.rssRoot %>',
        author: '<%= pkg.author.name %>',
        authorEmail: '<%= pkg.author.email %>',
        title: '<%= siteConfig.title %>',
        twitter: '<%= siteConfig.twitter %>',
        github: '<%= siteConfig.github %>'
      }
    },
    // Task configuration.
    concat: {
      options: {
        banner: '<%= banner %>',
        stripBanners: true
      },
      js: {
        src: ['<%= urls.jsSrc %>site.js', '<%= urls.jsSrc %>vendor/**/*'],
        dest: '<%= urls.distFolder %>site.js'
      }
      // CSS Concat handled by SASS
    },
    sass: {
      dist: {
        options: {
          style: 'expanded'
        },
        files: {
          '<%= urls.distFolder %>site.css': ['<%= urls.scssSrc %>/**/*', '<%= urls.cssSrc %>socialmenu.scss', '<%= urls.cssSrc %>thirdparty.scss', '<%= urls.cssSrc %>pygments.css', '<%= urls.cssSrc %>custom.css']
        }
      }
    },
    uglify: {
      options: {
        banner: '<%= banner %>'
      },
      js: {
        src: '<%= concat.js.dest %>',
        dest: '<%= urls.distFolder %>initial.min.js'
      }
    },
    cssmin: {
      dist: {
        options: {
          banner: '<%= banner %>'
        },
        files: {
          '<%= urls.distFolder %>global.min.css': ['<%= urls.distFolder %>global.css']
        }
      }
    },
    grunticon: {
      icons: {
        options: {
          svgo: true,
          src: '<%= urls.iconsSrc %>',
          dest: "<%= urls.distFolder %>icons/"
        }
      }
    },
    shell: {
      jekyll: {
        command: 'jekyll --no-auto',
        options: {
          stdout: true,
          execOptions: {
            cwd: '<%= urls.root %>'
          }
        }
      },
      presenters: {
        command: 'node fetch.js',
        options: {
          stdout: true,
          execOptions: {
            cwd: '_presenters'
          }
        }
      }
    },
    watch: {
      assets: {
        files: ['<%= urls.scssSrc %>**/*', '<%= urls.jsSrc %>**/*'],
        tasks: ['default']
      },
      grunticon: {
        files: ['<%= urls.svgSrc %>**/*'],
        tasks: ['grunticon']
      },
      content: {
        files: ['<%= urls.root %>dist/**/*', '<%= urls.root %>_posts/**/*', '<%= urls.root %>_layouts/**/*', '<%= urls.root %>about/**/*', '<%= urls.root %>license/**/*', '<%= urls.root %>feed/**/*', '<%= urls.root %>index.html', '<%= urls.root %>_plugins/**/*', '<%= urls.root %>_includes/**/*' ],
        tasks: ['content']
      },
      config: {
        files: ['Gruntfile.js'],
        tasks: ['config']
      }
    }
  });

  grunt.registerTask( 'yaml', function() {
    var output = grunt.config( 'yaml.file' ),
      vars = grunt.config( 'yaml.vars' ),
      fs = require('fs'),
      str = [ '# Autogenerated by `grunt config`' ];

    for( var j in vars ) {
      str.push( j + ': ' + vars[ j ] );
    }
    grunt.log.writeln( 'Writing ' + output );
    fs.writeFile( output, str.join( '\n' ), function(err) {
      if(err) {
        console.log(err);
      }
    });
  });

  // grunt.registerTask( 'feedburner-size', function() {
  //   var feed = grunt.config.get( 'urls.distFeed' ),
  //     fs = require('fs');

  //   var stats = fs.statSync( feed ),
  //     kbSize = Math.ceil( stats.size / 1024 ),
  //     isTooLarge = kbSize > 512,
  //     msg = 'Your atom.xml is ' + ( isTooLarge ? 'too large' : 'ok' ) + ' (' + kbSize + 'KB) for Feedburner (512KB max).';

  //   if( isTooLarge ) {
  //     grunt.fail.warn( msg );
  //   } else {
  //     grunt.log.writeln( msg );
  //   }
  // });

  // Default task.
  grunt.registerTask('assets', ['concat:js', 'sass', 'uglify', 'cssmin']);
  grunt.registerTask('images', ['grunticon']);
  grunt.registerTask('config', ['yaml']);
  grunt.registerTask('content', ['shell:jekyll']);
  grunt.registerTask('default', ['config', 'assets', 'images', 'content']);

};
